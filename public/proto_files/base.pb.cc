// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cs {
PROTOBUF_CONSTEXPR EasyPlayerInfo::EasyPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.profile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EasyPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EasyPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EasyPlayerInfoDefaultTypeInternal() {}
  union {
    EasyPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EasyPlayerInfoDefaultTypeInternal _EasyPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerChatInfo::PlayerChatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_cool_down_)*/{}
  , /*decltype(_impl_._chat_cool_down_cached_byte_size_)*/{0}
  , /*decltype(_impl_.block_player_)*/{}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.mute_end_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerChatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerChatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerChatInfoDefaultTypeInternal() {}
  union {
    PlayerChatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerChatInfoDefaultTypeInternal _PlayerChatInfo_default_instance_;
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_info_)*/nullptr
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.emoji_id_)*/0
  , /*decltype(_impl_.channel_id_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.msg_id_)*/int64_t{0}
  , /*decltype(_impl_.chat_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
}  // namespace cs
static ::_pb::Metadata file_level_metadata_base_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_base_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_base_2eproto = nullptr;

const uint32_t TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::EasyPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::EasyPlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::cs::EasyPlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::cs::EasyPlayerInfo, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::cs::EasyPlayerInfo, _impl_.profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerChatInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerChatInfo, _impl_.mute_end_time_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerChatInfo, _impl_.chat_cool_down_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerChatInfo, _impl_.block_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.emoji_id_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.channel_id_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.chat_id_),
  PROTOBUF_FIELD_OFFSET(::cs::ChatMessage, _impl_.player_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cs::EasyPlayerInfo)},
  { 10, -1, -1, sizeof(::cs::PlayerChatInfo)},
  { 20, -1, -1, sizeof(::cs::ChatMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cs::_EasyPlayerInfo_default_instance_._instance,
  &::cs::_PlayerChatInfo_default_instance_._instance,
  &::cs::_ChatMessage_default_instance_._instance,
};

const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbase.proto\022\002cs\"R\n\016EasyPlayerInfo\022\021\n\tpl"
  "ayer_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\016\n\006avatar\030\003 "
  "\001(\t\022\017\n\007profile\030\004 \001(\t\"|\n\016PlayerChatInfo\022\021"
  "\n\tplayer_id\030\001 \001(\003\022\025\n\rmute_end_time\030\002 \001(\003"
  "\022\026\n\016chat_cool_down\030\003 \003(\003\022(\n\014block_player"
  "\030\004 \003(\0132\022.cs.EasyPlayerInfo\"\260\001\n\013ChatMessa"
  "ge\022\021\n\tplayer_id\030\001 \001(\003\022\013\n\003msg\030\002 \001(\t\022\020\n\010em"
  "oji_id\030\003 \001(\005\022\022\n\nchannel_id\030\004 \001(\005\022\021\n\ttime"
  "stamp\030\005 \001(\003\022\016\n\006msg_id\030\006 \001(\003\022\017\n\007chat_id\030\007"
  " \001(\003\022\'\n\013player_info\030\010 \001(\0132\022.cs.EasyPlaye"
  "rInfob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_base_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_2eproto = {
    false, false, 413, descriptor_table_protodef_base_2eproto,
    "base.proto",
    &descriptor_table_base_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_base_2eproto::offsets,
    file_level_metadata_base_2eproto, file_level_enum_descriptors_base_2eproto,
    file_level_service_descriptors_base_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_2eproto_getter() {
  return &descriptor_table_base_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_2eproto(&descriptor_table_base_2eproto);
namespace cs {

// ===================================================================

class EasyPlayerInfo::_Internal {
 public:
};

EasyPlayerInfo::EasyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.EasyPlayerInfo)
}
EasyPlayerInfo::EasyPlayerInfo(const EasyPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EasyPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.profile_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile().empty()) {
    _this->_impl_.profile_.Set(from._internal_profile(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:cs.EasyPlayerInfo)
}

inline void EasyPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.profile_){}
    , decltype(_impl_.player_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EasyPlayerInfo::~EasyPlayerInfo() {
  // @@protoc_insertion_point(destructor:cs.EasyPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EasyPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.avatar_.Destroy();
  _impl_.profile_.Destroy();
}

void EasyPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EasyPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.EasyPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  _impl_.profile_.ClearToEmpty();
  _impl_.player_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EasyPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cs.EasyPlayerInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cs.EasyPlayerInfo.avatar"));
        } else
          goto handle_unusual;
        continue;
      // string profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_profile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cs.EasyPlayerInfo.profile"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EasyPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.EasyPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.EasyPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.EasyPlayerInfo.avatar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatar(), target);
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile().data(), static_cast<int>(this->_internal_profile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.EasyPlayerInfo.profile");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.EasyPlayerInfo)
  return target;
}

size_t EasyPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.EasyPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string profile = 4;
  if (!this->_internal_profile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile());
  }

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EasyPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EasyPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EasyPlayerInfo::GetClassData() const { return &_class_data_; }


void EasyPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EasyPlayerInfo*>(&to_msg);
  auto& from = static_cast<const EasyPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.EasyPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_profile().empty()) {
    _this->_internal_set_profile(from._internal_profile());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EasyPlayerInfo::CopyFrom(const EasyPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.EasyPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EasyPlayerInfo::IsInitialized() const {
  return true;
}

void EasyPlayerInfo::InternalSwap(EasyPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_, lhs_arena,
      &other->_impl_.profile_, rhs_arena
  );
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EasyPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[0]);
}

// ===================================================================

class PlayerChatInfo::_Internal {
 public:
};

PlayerChatInfo::PlayerChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerChatInfo)
}
PlayerChatInfo::PlayerChatInfo(const PlayerChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerChatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_cool_down_){from._impl_.chat_cool_down_}
    , /*decltype(_impl_._chat_cool_down_cached_byte_size_)*/{0}
    , decltype(_impl_.block_player_){from._impl_.block_player_}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.mute_end_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mute_end_time_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.mute_end_time_));
  // @@protoc_insertion_point(copy_constructor:cs.PlayerChatInfo)
}

inline void PlayerChatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_cool_down_){arena}
    , /*decltype(_impl_._chat_cool_down_cached_byte_size_)*/{0}
    , decltype(_impl_.block_player_){arena}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.mute_end_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerChatInfo::~PlayerChatInfo() {
  // @@protoc_insertion_point(destructor:cs.PlayerChatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerChatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_cool_down_.~RepeatedField();
  _impl_.block_player_.~RepeatedPtrField();
}

void PlayerChatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerChatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_cool_down_.Clear();
  _impl_.block_player_.Clear();
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mute_end_time_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.mute_end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerChatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 mute_end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mute_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 chat_cool_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_chat_cool_down(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_chat_cool_down(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cs.EasyPlayerInfo block_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerChatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerChatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // int64 mute_end_time = 2;
  if (this->_internal_mute_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_mute_end_time(), target);
  }

  // repeated int64 chat_cool_down = 3;
  {
    int byte_size = _impl_._chat_cool_down_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_chat_cool_down(), byte_size, target);
    }
  }

  // repeated .cs.EasyPlayerInfo block_player = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_player_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_player(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerChatInfo)
  return target;
}

size_t PlayerChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerChatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 chat_cool_down = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.chat_cool_down_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chat_cool_down_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .cs.EasyPlayerInfo block_player = 4;
  total_size += 1UL * this->_internal_block_player_size();
  for (const auto& msg : this->_impl_.block_player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // int64 mute_end_time = 2;
  if (this->_internal_mute_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mute_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerChatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerChatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerChatInfo::GetClassData() const { return &_class_data_; }


void PlayerChatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerChatInfo*>(&to_msg);
  auto& from = static_cast<const PlayerChatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerChatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chat_cool_down_.MergeFrom(from._impl_.chat_cool_down_);
  _this->_impl_.block_player_.MergeFrom(from._impl_.block_player_);
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_mute_end_time() != 0) {
    _this->_internal_set_mute_end_time(from._internal_mute_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerChatInfo::CopyFrom(const PlayerChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerChatInfo::IsInitialized() const {
  return true;
}

void PlayerChatInfo::InternalSwap(PlayerChatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chat_cool_down_.InternalSwap(&other->_impl_.chat_cool_down_);
  _impl_.block_player_.InternalSwap(&other->_impl_.block_player_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerChatInfo, _impl_.mute_end_time_)
      + sizeof(PlayerChatInfo::_impl_.mute_end_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerChatInfo, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerChatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[1]);
}

// ===================================================================

class ChatMessage::_Internal {
 public:
  static const ::cs::EasyPlayerInfo& player_info(const ChatMessage* msg);
};

const ::cs::EasyPlayerInfo&
ChatMessage::_Internal::player_info(const ChatMessage* msg) {
  return *msg->_impl_.player_info_;
}
ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.emoji_id_){}
    , decltype(_impl_.channel_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.msg_id_){}
    , decltype(_impl_.chat_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player_info()) {
    _this->_impl_.player_info_ = new ::cs::EasyPlayerInfo(*from._impl_.player_info_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chat_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.chat_id_));
  // @@protoc_insertion_point(copy_constructor:cs.ChatMessage)
}

inline void ChatMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.player_info_){nullptr}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.emoji_id_){0}
    , decltype(_impl_.channel_id_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.msg_id_){int64_t{0}}
    , decltype(_impl_.chat_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:cs.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_info_;
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.ChatMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chat_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.chat_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cs.ChatMessage.msg"));
        } else
          goto handle_unusual;
        continue;
      // int32 emoji_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.emoji_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 msg_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 chat_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cs.EasyPlayerInfo player_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.ChatMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.ChatMessage.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 emoji_id = 3;
  if (this->_internal_emoji_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_emoji_id(), target);
  }

  // int32 channel_id = 4;
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel_id(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_msg_id(), target);
  }

  // int64 chat_id = 7;
  if (this->_internal_chat_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_chat_id(), target);
  }

  // .cs.EasyPlayerInfo player_info = 8;
  if (this->_internal_has_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::player_info(this),
        _Internal::player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.ChatMessage)
  return target;
}

size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.ChatMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .cs.EasyPlayerInfo player_info = 8;
  if (this->_internal_has_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_info_);
  }

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // int32 emoji_id = 3;
  if (this->_internal_emoji_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_emoji_id());
  }

  // int32 channel_id = 4;
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel_id());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 msg_id = 6;
  if (this->_internal_msg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int64 chat_id = 7;
  if (this->_internal_chat_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chat_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.ChatMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_player_info()) {
    _this->_internal_mutable_player_info()->::cs::EasyPlayerInfo::MergeFrom(
        from._internal_player_info());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_emoji_id() != 0) {
    _this->_internal_set_emoji_id(from._internal_emoji_id());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_msg_id() != 0) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_chat_id() != 0) {
    _this->_internal_set_chat_id(from._internal_chat_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.chat_id_)
      + sizeof(ChatMessage::_impl_.chat_id_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.player_info_)>(
          reinterpret_cast<char*>(&_impl_.player_info_),
          reinterpret_cast<char*>(&other->_impl_.player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cs::EasyPlayerInfo*
Arena::CreateMaybeMessage< ::cs::EasyPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::EasyPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerChatInfo*
Arena::CreateMaybeMessage< ::cs::PlayerChatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::ChatMessage*
Arena::CreateMaybeMessage< ::cs::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::ChatMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
