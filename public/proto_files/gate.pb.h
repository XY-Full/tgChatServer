// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gate_2eproto;
class Heart;
struct HeartDefaultTypeInternal;
extern HeartDefaultTypeInternal _Heart_default_instance_;
class Heart_Request;
struct Heart_RequestDefaultTypeInternal;
extern Heart_RequestDefaultTypeInternal _Heart_Request_default_instance_;
class Heart_Response;
struct Heart_ResponseDefaultTypeInternal;
extern Heart_ResponseDefaultTypeInternal _Heart_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Heart* Arena::CreateMaybeMessage<::Heart>(Arena*);
template<> ::Heart_Request* Arena::CreateMaybeMessage<::Heart_Request>(Arena*);
template<> ::Heart_Response* Arena::CreateMaybeMessage<::Heart_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Heart_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Heart.Request) */ {
 public:
  inline Heart_Request() : Heart_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Heart_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart_Request(const Heart_Request& from);
  Heart_Request(Heart_Request&& from) noexcept
    : Heart_Request() {
    *this = ::std::move(from);
  }

  inline Heart_Request& operator=(const Heart_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart_Request& operator=(Heart_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart_Request* internal_default_instance() {
    return reinterpret_cast<const Heart_Request*>(
               &_Heart_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heart_Request& a, Heart_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Heart_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Heart_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Heart.Request";
  }
  protected:
  explicit Heart_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Heart.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_gate_2eproto;
};
// -------------------------------------------------------------------

class Heart_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Heart.Response) */ {
 public:
  inline Heart_Response() : Heart_Response(nullptr) {}
  ~Heart_Response() override;
  explicit PROTOBUF_CONSTEXPR Heart_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart_Response(const Heart_Response& from);
  Heart_Response(Heart_Response&& from) noexcept
    : Heart_Response() {
    *this = ::std::move(from);
  }

  inline Heart_Response& operator=(const Heart_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart_Response& operator=(Heart_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart_Response* internal_default_instance() {
    return reinterpret_cast<const Heart_Response*>(
               &_Heart_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Heart_Response& a, Heart_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heart_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heart_Response& from) {
    Heart_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heart_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Heart.Response";
  }
  protected:
  explicit Heart_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kErrFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 err = 1;
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Heart.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gate_2eproto;
};
// -------------------------------------------------------------------

class Heart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Heart) */ {
 public:
  inline Heart() : Heart(nullptr) {}
  ~Heart() override;
  explicit PROTOBUF_CONSTEXPR Heart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heart(const Heart& from);
  Heart(Heart&& from) noexcept
    : Heart() {
    *this = ::std::move(from);
  }

  inline Heart& operator=(const Heart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heart& operator=(Heart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heart* internal_default_instance() {
    return reinterpret_cast<const Heart*>(
               &_Heart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Heart& a, Heart& b) {
    a.Swap(&b);
  }
  inline void Swap(Heart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heart& from) {
    Heart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Heart";
  }
  protected:
  explicit Heart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Heart_Request Request;
  typedef Heart_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .Heart.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::Heart_Request& request() const;
  PROTOBUF_NODISCARD ::Heart_Request* release_request();
  ::Heart_Request* mutable_request();
  void set_allocated_request(::Heart_Request* request);
  private:
  const ::Heart_Request& _internal_request() const;
  ::Heart_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::Heart_Request* request);
  ::Heart_Request* unsafe_arena_release_request();

  // .Heart.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::Heart_Response& response() const;
  PROTOBUF_NODISCARD ::Heart_Response* release_response();
  ::Heart_Response* mutable_response();
  void set_allocated_response(::Heart_Response* response);
  private:
  const ::Heart_Response& _internal_response() const;
  ::Heart_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::Heart_Response* response);
  ::Heart_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:Heart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Heart_Request* request_;
    ::Heart_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heart_Request

// -------------------------------------------------------------------

// Heart_Response

// int32 err = 1;
inline void Heart_Response::clear_err() {
  _impl_.err_ = 0;
}
inline int32_t Heart_Response::_internal_err() const {
  return _impl_.err_;
}
inline int32_t Heart_Response::err() const {
  // @@protoc_insertion_point(field_get:Heart.Response.err)
  return _internal_err();
}
inline void Heart_Response::_internal_set_err(int32_t value) {
  
  _impl_.err_ = value;
}
inline void Heart_Response::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:Heart.Response.err)
}

// int64 timestamp = 2;
inline void Heart_Response::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Heart_Response::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Heart_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:Heart.Response.timestamp)
  return _internal_timestamp();
}
inline void Heart_Response::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Heart_Response::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Heart.Response.timestamp)
}

// -------------------------------------------------------------------

// Heart

// .Heart.Request request = 1;
inline bool Heart::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool Heart::has_request() const {
  return _internal_has_request();
}
inline void Heart::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::Heart_Request& Heart::_internal_request() const {
  const ::Heart_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::Heart_Request&>(
      ::_Heart_Request_default_instance_);
}
inline const ::Heart_Request& Heart::request() const {
  // @@protoc_insertion_point(field_get:Heart.request)
  return _internal_request();
}
inline void Heart::unsafe_arena_set_allocated_request(
    ::Heart_Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Heart.request)
}
inline ::Heart_Request* Heart::release_request() {
  
  ::Heart_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Heart_Request* Heart::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:Heart.request)
  
  ::Heart_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::Heart_Request* Heart::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::Heart_Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::Heart_Request* Heart::mutable_request() {
  ::Heart_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:Heart.request)
  return _msg;
}
inline void Heart::set_allocated_request(::Heart_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:Heart.request)
}

// .Heart.Response response = 2;
inline bool Heart::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool Heart::has_response() const {
  return _internal_has_response();
}
inline void Heart::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::Heart_Response& Heart::_internal_response() const {
  const ::Heart_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::Heart_Response&>(
      ::_Heart_Response_default_instance_);
}
inline const ::Heart_Response& Heart::response() const {
  // @@protoc_insertion_point(field_get:Heart.response)
  return _internal_response();
}
inline void Heart::unsafe_arena_set_allocated_response(
    ::Heart_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Heart.response)
}
inline ::Heart_Response* Heart::release_response() {
  
  ::Heart_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Heart_Response* Heart::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:Heart.response)
  
  ::Heart_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::Heart_Response* Heart::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::Heart_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::Heart_Response* Heart::mutable_response() {
  ::Heart_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:Heart.response)
  return _msg;
}
inline void Heart::set_allocated_response(::Heart_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Heart.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gate_2eproto
