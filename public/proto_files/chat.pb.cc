// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cs {
PROTOBUF_CONSTEXPR PlayerSendMessage_Request::PlayerSendMessage_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emojiid_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.chatid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSendMessage_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSendMessage_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSendMessage_RequestDefaultTypeInternal() {}
  union {
    PlayerSendMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSendMessage_RequestDefaultTypeInternal _PlayerSendMessage_Request_default_instance_;
PROTOBUF_CONSTEXPR PlayerSendMessage_Response::PlayerSendMessage_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSendMessage_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSendMessage_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSendMessage_ResponseDefaultTypeInternal() {}
  union {
    PlayerSendMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSendMessage_ResponseDefaultTypeInternal _PlayerSendMessage_Response_default_instance_;
PROTOBUF_CONSTEXPR PlayerSendMessage::PlayerSendMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSendMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSendMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSendMessageDefaultTypeInternal() {}
  union {
    PlayerSendMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSendMessageDefaultTypeInternal _PlayerSendMessage_default_instance_;
PROTOBUF_CONSTEXPR PlayerReqMessage_Request::PlayerReqMessage_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_id_)*/int64_t{0}
  , /*decltype(_impl_.after_count_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerReqMessage_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReqMessage_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReqMessage_RequestDefaultTypeInternal() {}
  union {
    PlayerReqMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReqMessage_RequestDefaultTypeInternal _PlayerReqMessage_Request_default_instance_;
PROTOBUF_CONSTEXPR PlayerReqMessage_Response::PlayerReqMessage_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_.err_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerReqMessage_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReqMessage_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReqMessage_ResponseDefaultTypeInternal() {}
  union {
    PlayerReqMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReqMessage_ResponseDefaultTypeInternal _PlayerReqMessage_Response_default_instance_;
PROTOBUF_CONSTEXPR PlayerReqMessage::PlayerReqMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerReqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerReqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerReqMessageDefaultTypeInternal() {}
  union {
    PlayerReqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerReqMessageDefaultTypeInternal _PlayerReqMessage_default_instance_;
}  // namespace cs
static ::_pb::Metadata file_level_metadata_chat_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Request, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Request, _impl_.emojiid_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Request, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Request, _impl_.chatid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage_Response, _impl_.err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerSendMessage, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Request, _impl_.msg_id_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Request, _impl_.after_count_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Request, _impl_.channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Response, _impl_.err_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage_Response, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::cs::PlayerReqMessage, _impl_.response_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cs::PlayerSendMessage_Request)},
  { 10, -1, -1, sizeof(::cs::PlayerSendMessage_Response)},
  { 17, -1, -1, sizeof(::cs::PlayerSendMessage)},
  { 25, -1, -1, sizeof(::cs::PlayerReqMessage_Request)},
  { 34, -1, -1, sizeof(::cs::PlayerReqMessage_Response)},
  { 42, -1, -1, sizeof(::cs::PlayerReqMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cs::_PlayerSendMessage_Request_default_instance_._instance,
  &::cs::_PlayerSendMessage_Response_default_instance_._instance,
  &::cs::_PlayerSendMessage_default_instance_._instance,
  &::cs::_PlayerReqMessage_Request_default_instance_._instance,
  &::cs::_PlayerReqMessage_Response_default_instance_._instance,
  &::cs::_PlayerReqMessage_default_instance_._instance,
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\002cs\032\nbase.proto\"\330\001\n\021PlayerS"
  "endMessage\022.\n\007request\030\001 \001(\0132\035.cs.PlayerS"
  "endMessage.Request\0220\n\010response\030\002 \001(\0132\036.c"
  "s.PlayerSendMessage.Response\032H\n\007Request\022"
  "\013\n\003msg\030\001 \001(\t\022\017\n\007emojiId\030\002 \001(\005\022\017\n\007channel"
  "\030\003 \001(\005\022\016\n\006chatId\030\004 \001(\005\032\027\n\010Response\022\013\n\003er"
  "r\030\001 \001(\005\"\352\001\n\020PlayerReqMessage\022-\n\007request\030"
  "\001 \001(\0132\034.cs.PlayerReqMessage.Request\022/\n\010r"
  "esponse\030\002 \001(\0132\035.cs.PlayerReqMessage.Resp"
  "onse\032\?\n\007Request\022\016\n\006msg_id\030\001 \001(\003\022\023\n\013after"
  "_count\030\002 \001(\005\022\017\n\007channel\030\003 \001(\005\0325\n\010Respons"
  "e\022\013\n\003err\030\001 \001(\005\022\034\n\003msg\030\002 \003(\0132\017.cs.ChatMes"
  "sageb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_chat_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false, false, 492, descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto, file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace cs {

// ===================================================================

class PlayerSendMessage_Request::_Internal {
 public:
};

PlayerSendMessage_Request::PlayerSendMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerSendMessage.Request)
}
PlayerSendMessage_Request::PlayerSendMessage_Request(const PlayerSendMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSendMessage_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.emojiid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.chatid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.emojiid_, &from._impl_.emojiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chatid_) -
    reinterpret_cast<char*>(&_impl_.emojiid_)) + sizeof(_impl_.chatid_));
  // @@protoc_insertion_point(copy_constructor:cs.PlayerSendMessage.Request)
}

inline void PlayerSendMessage_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.emojiid_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.chatid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerSendMessage_Request::~PlayerSendMessage_Request() {
  // @@protoc_insertion_point(destructor:cs.PlayerSendMessage.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSendMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void PlayerSendMessage_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSendMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerSendMessage.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.emojiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chatid_) -
      reinterpret_cast<char*>(&_impl_.emojiid_)) + sizeof(_impl_.chatid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSendMessage_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cs.PlayerSendMessage.Request.msg"));
        } else
          goto handle_unusual;
        continue;
      // int32 emojiId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.emojiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chatId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSendMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerSendMessage.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.PlayerSendMessage.Request.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // int32 emojiId = 2;
  if (this->_internal_emojiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_emojiid(), target);
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // int32 chatId = 4;
  if (this->_internal_chatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_chatid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerSendMessage.Request)
  return target;
}

size_t PlayerSendMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerSendMessage.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 emojiId = 2;
  if (this->_internal_emojiid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_emojiid());
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // int32 chatId = 4;
  if (this->_internal_chatid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chatid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSendMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSendMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSendMessage_Request::GetClassData() const { return &_class_data_; }


void PlayerSendMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSendMessage_Request*>(&to_msg);
  auto& from = static_cast<const PlayerSendMessage_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerSendMessage.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_emojiid() != 0) {
    _this->_internal_set_emojiid(from._internal_emojiid());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_chatid() != 0) {
    _this->_internal_set_chatid(from._internal_chatid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSendMessage_Request::CopyFrom(const PlayerSendMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerSendMessage.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSendMessage_Request::IsInitialized() const {
  return true;
}

void PlayerSendMessage_Request::InternalSwap(PlayerSendMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSendMessage_Request, _impl_.chatid_)
      + sizeof(PlayerSendMessage_Request::_impl_.chatid_)
      - PROTOBUF_FIELD_OFFSET(PlayerSendMessage_Request, _impl_.emojiid_)>(
          reinterpret_cast<char*>(&_impl_.emojiid_),
          reinterpret_cast<char*>(&other->_impl_.emojiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSendMessage_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}

// ===================================================================

class PlayerSendMessage_Response::_Internal {
 public:
};

PlayerSendMessage_Response::PlayerSendMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerSendMessage.Response)
}
PlayerSendMessage_Response::PlayerSendMessage_Response(const PlayerSendMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSendMessage_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:cs.PlayerSendMessage.Response)
}

inline void PlayerSendMessage_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerSendMessage_Response::~PlayerSendMessage_Response() {
  // @@protoc_insertion_point(destructor:cs.PlayerSendMessage.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSendMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerSendMessage_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSendMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerSendMessage.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSendMessage_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSendMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerSendMessage.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerSendMessage.Response)
  return target;
}

size_t PlayerSendMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerSendMessage.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSendMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSendMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSendMessage_Response::GetClassData() const { return &_class_data_; }


void PlayerSendMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSendMessage_Response*>(&to_msg);
  auto& from = static_cast<const PlayerSendMessage_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerSendMessage.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSendMessage_Response::CopyFrom(const PlayerSendMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerSendMessage.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSendMessage_Response::IsInitialized() const {
  return true;
}

void PlayerSendMessage_Response::InternalSwap(PlayerSendMessage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSendMessage_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}

// ===================================================================

class PlayerSendMessage::_Internal {
 public:
  static const ::cs::PlayerSendMessage_Request& request(const PlayerSendMessage* msg);
  static const ::cs::PlayerSendMessage_Response& response(const PlayerSendMessage* msg);
};

const ::cs::PlayerSendMessage_Request&
PlayerSendMessage::_Internal::request(const PlayerSendMessage* msg) {
  return *msg->_impl_.request_;
}
const ::cs::PlayerSendMessage_Response&
PlayerSendMessage::_Internal::response(const PlayerSendMessage* msg) {
  return *msg->_impl_.response_;
}
PlayerSendMessage::PlayerSendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerSendMessage)
}
PlayerSendMessage::PlayerSendMessage(const PlayerSendMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSendMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::cs::PlayerSendMessage_Request(*from._impl_.request_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::cs::PlayerSendMessage_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:cs.PlayerSendMessage)
}

inline void PlayerSendMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerSendMessage::~PlayerSendMessage() {
  // @@protoc_insertion_point(destructor:cs.PlayerSendMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSendMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void PlayerSendMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSendMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerSendMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSendMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cs.PlayerSendMessage.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cs.PlayerSendMessage.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSendMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerSendMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cs.PlayerSendMessage.Request request = 1;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .cs.PlayerSendMessage.Response response = 2;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerSendMessage)
  return target;
}

size_t PlayerSendMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerSendMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cs.PlayerSendMessage.Request request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // .cs.PlayerSendMessage.Response response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSendMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSendMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSendMessage::GetClassData() const { return &_class_data_; }


void PlayerSendMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSendMessage*>(&to_msg);
  auto& from = static_cast<const PlayerSendMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerSendMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::cs::PlayerSendMessage_Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::cs::PlayerSendMessage_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSendMessage::CopyFrom(const PlayerSendMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerSendMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSendMessage::IsInitialized() const {
  return true;
}

void PlayerSendMessage::InternalSwap(PlayerSendMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSendMessage, _impl_.response_)
      + sizeof(PlayerSendMessage::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(PlayerSendMessage, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSendMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}

// ===================================================================

class PlayerReqMessage_Request::_Internal {
 public:
};

PlayerReqMessage_Request::PlayerReqMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerReqMessage.Request)
}
PlayerReqMessage_Request::PlayerReqMessage_Request(const PlayerReqMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerReqMessage_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){}
    , decltype(_impl_.after_count_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_id_, &from._impl_.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.msg_id_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:cs.PlayerReqMessage.Request)
}

inline void PlayerReqMessage_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_id_){int64_t{0}}
    , decltype(_impl_.after_count_){0}
    , decltype(_impl_.channel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerReqMessage_Request::~PlayerReqMessage_Request() {
  // @@protoc_insertion_point(destructor:cs.PlayerReqMessage.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReqMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerReqMessage_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerReqMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerReqMessage.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channel_) -
      reinterpret_cast<char*>(&_impl_.msg_id_)) + sizeof(_impl_.channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReqMessage_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 after_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.after_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReqMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerReqMessage.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_msg_id(), target);
  }

  // int32 after_count = 2;
  if (this->_internal_after_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_after_count(), target);
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerReqMessage.Request)
  return target;
}

size_t PlayerReqMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerReqMessage.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 msg_id = 1;
  if (this->_internal_msg_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_msg_id());
  }

  // int32 after_count = 2;
  if (this->_internal_after_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_after_count());
  }

  // int32 channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReqMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerReqMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReqMessage_Request::GetClassData() const { return &_class_data_; }


void PlayerReqMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerReqMessage_Request*>(&to_msg);
  auto& from = static_cast<const PlayerReqMessage_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerReqMessage.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_id() != 0) {
    _this->_internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_after_count() != 0) {
    _this->_internal_set_after_count(from._internal_after_count());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReqMessage_Request::CopyFrom(const PlayerReqMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerReqMessage.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReqMessage_Request::IsInitialized() const {
  return true;
}

void PlayerReqMessage_Request::InternalSwap(PlayerReqMessage_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerReqMessage_Request, _impl_.channel_)
      + sizeof(PlayerReqMessage_Request::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(PlayerReqMessage_Request, _impl_.msg_id_)>(
          reinterpret_cast<char*>(&_impl_.msg_id_),
          reinterpret_cast<char*>(&other->_impl_.msg_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReqMessage_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}

// ===================================================================

class PlayerReqMessage_Response::_Internal {
 public:
};

void PlayerReqMessage_Response::clear_msg() {
  _impl_.msg_.Clear();
}
PlayerReqMessage_Response::PlayerReqMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerReqMessage.Response)
}
PlayerReqMessage_Response::PlayerReqMessage_Response(const PlayerReqMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerReqMessage_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){from._impl_.msg_}
    , decltype(_impl_.err_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.err_ = from._impl_.err_;
  // @@protoc_insertion_point(copy_constructor:cs.PlayerReqMessage.Response)
}

inline void PlayerReqMessage_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){arena}
    , decltype(_impl_.err_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerReqMessage_Response::~PlayerReqMessage_Response() {
  // @@protoc_insertion_point(destructor:cs.PlayerReqMessage.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReqMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.~RepeatedPtrField();
}

void PlayerReqMessage_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerReqMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerReqMessage.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.Clear();
  _impl_.err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReqMessage_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cs.ChatMessage msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReqMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerReqMessage.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  // repeated .cs.ChatMessage msg = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerReqMessage.Response)
  return target;
}

size_t PlayerReqMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerReqMessage.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cs.ChatMessage msg = 2;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->_impl_.msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReqMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerReqMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReqMessage_Response::GetClassData() const { return &_class_data_; }


void PlayerReqMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerReqMessage_Response*>(&to_msg);
  auto& from = static_cast<const PlayerReqMessage_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerReqMessage.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.msg_.MergeFrom(from._impl_.msg_);
  if (from._internal_err() != 0) {
    _this->_internal_set_err(from._internal_err());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReqMessage_Response::CopyFrom(const PlayerReqMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerReqMessage.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReqMessage_Response::IsInitialized() const {
  return true;
}

void PlayerReqMessage_Response::InternalSwap(PlayerReqMessage_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.msg_.InternalSwap(&other->_impl_.msg_);
  swap(_impl_.err_, other->_impl_.err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReqMessage_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}

// ===================================================================

class PlayerReqMessage::_Internal {
 public:
  static const ::cs::PlayerReqMessage_Request& request(const PlayerReqMessage* msg);
  static const ::cs::PlayerReqMessage_Response& response(const PlayerReqMessage* msg);
};

const ::cs::PlayerReqMessage_Request&
PlayerReqMessage::_Internal::request(const PlayerReqMessage* msg) {
  return *msg->_impl_.request_;
}
const ::cs::PlayerReqMessage_Response&
PlayerReqMessage::_Internal::response(const PlayerReqMessage* msg) {
  return *msg->_impl_.response_;
}
PlayerReqMessage::PlayerReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:cs.PlayerReqMessage)
}
PlayerReqMessage::PlayerReqMessage(const PlayerReqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerReqMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::cs::PlayerReqMessage_Request(*from._impl_.request_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::cs::PlayerReqMessage_Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:cs.PlayerReqMessage)
}

inline void PlayerReqMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerReqMessage::~PlayerReqMessage() {
  // @@protoc_insertion_point(destructor:cs.PlayerReqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerReqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void PlayerReqMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerReqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.PlayerReqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerReqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cs.PlayerReqMessage.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cs.PlayerReqMessage.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerReqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.PlayerReqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cs.PlayerReqMessage.Request request = 1;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .cs.PlayerReqMessage.Response response = 2;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.PlayerReqMessage)
  return target;
}

size_t PlayerReqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.PlayerReqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cs.PlayerReqMessage.Request request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // .cs.PlayerReqMessage.Response response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerReqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerReqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerReqMessage::GetClassData() const { return &_class_data_; }


void PlayerReqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerReqMessage*>(&to_msg);
  auto& from = static_cast<const PlayerReqMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cs.PlayerReqMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::cs::PlayerReqMessage_Request::MergeFrom(
        from._internal_request());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::cs::PlayerReqMessage_Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerReqMessage::CopyFrom(const PlayerReqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.PlayerReqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReqMessage::IsInitialized() const {
  return true;
}

void PlayerReqMessage::InternalSwap(PlayerReqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerReqMessage, _impl_.response_)
      + sizeof(PlayerReqMessage::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(PlayerReqMessage, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerReqMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cs::PlayerSendMessage_Request*
Arena::CreateMaybeMessage< ::cs::PlayerSendMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerSendMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerSendMessage_Response*
Arena::CreateMaybeMessage< ::cs::PlayerSendMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerSendMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerSendMessage*
Arena::CreateMaybeMessage< ::cs::PlayerSendMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerSendMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerReqMessage_Request*
Arena::CreateMaybeMessage< ::cs::PlayerReqMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerReqMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerReqMessage_Response*
Arena::CreateMaybeMessage< ::cs::PlayerReqMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerReqMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::PlayerReqMessage*
Arena::CreateMaybeMessage< ::cs::PlayerReqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::PlayerReqMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
