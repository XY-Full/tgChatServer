// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace cs {
class PlayerReqMessage;
struct PlayerReqMessageDefaultTypeInternal;
extern PlayerReqMessageDefaultTypeInternal _PlayerReqMessage_default_instance_;
class PlayerReqMessage_Request;
struct PlayerReqMessage_RequestDefaultTypeInternal;
extern PlayerReqMessage_RequestDefaultTypeInternal _PlayerReqMessage_Request_default_instance_;
class PlayerReqMessage_Response;
struct PlayerReqMessage_ResponseDefaultTypeInternal;
extern PlayerReqMessage_ResponseDefaultTypeInternal _PlayerReqMessage_Response_default_instance_;
class PlayerSendMessage;
struct PlayerSendMessageDefaultTypeInternal;
extern PlayerSendMessageDefaultTypeInternal _PlayerSendMessage_default_instance_;
class PlayerSendMessage_Request;
struct PlayerSendMessage_RequestDefaultTypeInternal;
extern PlayerSendMessage_RequestDefaultTypeInternal _PlayerSendMessage_Request_default_instance_;
class PlayerSendMessage_Response;
struct PlayerSendMessage_ResponseDefaultTypeInternal;
extern PlayerSendMessage_ResponseDefaultTypeInternal _PlayerSendMessage_Response_default_instance_;
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> ::cs::PlayerReqMessage* Arena::CreateMaybeMessage<::cs::PlayerReqMessage>(Arena*);
template<> ::cs::PlayerReqMessage_Request* Arena::CreateMaybeMessage<::cs::PlayerReqMessage_Request>(Arena*);
template<> ::cs::PlayerReqMessage_Response* Arena::CreateMaybeMessage<::cs::PlayerReqMessage_Response>(Arena*);
template<> ::cs::PlayerSendMessage* Arena::CreateMaybeMessage<::cs::PlayerSendMessage>(Arena*);
template<> ::cs::PlayerSendMessage_Request* Arena::CreateMaybeMessage<::cs::PlayerSendMessage_Request>(Arena*);
template<> ::cs::PlayerSendMessage_Response* Arena::CreateMaybeMessage<::cs::PlayerSendMessage_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cs {

// ===================================================================

class PlayerSendMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerSendMessage.Request) */ {
 public:
  inline PlayerSendMessage_Request() : PlayerSendMessage_Request(nullptr) {}
  ~PlayerSendMessage_Request() override;
  explicit PROTOBUF_CONSTEXPR PlayerSendMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSendMessage_Request(const PlayerSendMessage_Request& from);
  PlayerSendMessage_Request(PlayerSendMessage_Request&& from) noexcept
    : PlayerSendMessage_Request() {
    *this = ::std::move(from);
  }

  inline PlayerSendMessage_Request& operator=(const PlayerSendMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSendMessage_Request& operator=(PlayerSendMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSendMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSendMessage_Request* internal_default_instance() {
    return reinterpret_cast<const PlayerSendMessage_Request*>(
               &_PlayerSendMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerSendMessage_Request& a, PlayerSendMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSendMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSendMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSendMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSendMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSendMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSendMessage_Request& from) {
    PlayerSendMessage_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSendMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerSendMessage.Request";
  }
  protected:
  explicit PlayerSendMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kEmojiIdFieldNumber = 2,
    kChannelFieldNumber = 3,
    kChatIdFieldNumber = 4,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 emojiId = 2;
  void clear_emojiid();
  int32_t emojiid() const;
  void set_emojiid(int32_t value);
  private:
  int32_t _internal_emojiid() const;
  void _internal_set_emojiid(int32_t value);
  public:

  // int32 channel = 3;
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // int32 chatId = 4;
  void clear_chatid();
  int32_t chatid() const;
  void set_chatid(int32_t value);
  private:
  int32_t _internal_chatid() const;
  void _internal_set_chatid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.PlayerSendMessage.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t emojiid_;
    int32_t channel_;
    int32_t chatid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PlayerSendMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerSendMessage.Response) */ {
 public:
  inline PlayerSendMessage_Response() : PlayerSendMessage_Response(nullptr) {}
  ~PlayerSendMessage_Response() override;
  explicit PROTOBUF_CONSTEXPR PlayerSendMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSendMessage_Response(const PlayerSendMessage_Response& from);
  PlayerSendMessage_Response(PlayerSendMessage_Response&& from) noexcept
    : PlayerSendMessage_Response() {
    *this = ::std::move(from);
  }

  inline PlayerSendMessage_Response& operator=(const PlayerSendMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSendMessage_Response& operator=(PlayerSendMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSendMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSendMessage_Response* internal_default_instance() {
    return reinterpret_cast<const PlayerSendMessage_Response*>(
               &_PlayerSendMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerSendMessage_Response& a, PlayerSendMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSendMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSendMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSendMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSendMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSendMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSendMessage_Response& from) {
    PlayerSendMessage_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSendMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerSendMessage.Response";
  }
  protected:
  explicit PlayerSendMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // int32 err = 1;
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.PlayerSendMessage.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PlayerSendMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerSendMessage) */ {
 public:
  inline PlayerSendMessage() : PlayerSendMessage(nullptr) {}
  ~PlayerSendMessage() override;
  explicit PROTOBUF_CONSTEXPR PlayerSendMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSendMessage(const PlayerSendMessage& from);
  PlayerSendMessage(PlayerSendMessage&& from) noexcept
    : PlayerSendMessage() {
    *this = ::std::move(from);
  }

  inline PlayerSendMessage& operator=(const PlayerSendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSendMessage& operator=(PlayerSendMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSendMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSendMessage* internal_default_instance() {
    return reinterpret_cast<const PlayerSendMessage*>(
               &_PlayerSendMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerSendMessage& a, PlayerSendMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSendMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSendMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSendMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSendMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSendMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSendMessage& from) {
    PlayerSendMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSendMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerSendMessage";
  }
  protected:
  explicit PlayerSendMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerSendMessage_Request Request;
  typedef PlayerSendMessage_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .cs.PlayerSendMessage.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::cs::PlayerSendMessage_Request& request() const;
  PROTOBUF_NODISCARD ::cs::PlayerSendMessage_Request* release_request();
  ::cs::PlayerSendMessage_Request* mutable_request();
  void set_allocated_request(::cs::PlayerSendMessage_Request* request);
  private:
  const ::cs::PlayerSendMessage_Request& _internal_request() const;
  ::cs::PlayerSendMessage_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::cs::PlayerSendMessage_Request* request);
  ::cs::PlayerSendMessage_Request* unsafe_arena_release_request();

  // .cs.PlayerSendMessage.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::cs::PlayerSendMessage_Response& response() const;
  PROTOBUF_NODISCARD ::cs::PlayerSendMessage_Response* release_response();
  ::cs::PlayerSendMessage_Response* mutable_response();
  void set_allocated_response(::cs::PlayerSendMessage_Response* response);
  private:
  const ::cs::PlayerSendMessage_Response& _internal_response() const;
  ::cs::PlayerSendMessage_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::cs::PlayerSendMessage_Response* response);
  ::cs::PlayerSendMessage_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:cs.PlayerSendMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cs::PlayerSendMessage_Request* request_;
    ::cs::PlayerSendMessage_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PlayerReqMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerReqMessage.Request) */ {
 public:
  inline PlayerReqMessage_Request() : PlayerReqMessage_Request(nullptr) {}
  ~PlayerReqMessage_Request() override;
  explicit PROTOBUF_CONSTEXPR PlayerReqMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerReqMessage_Request(const PlayerReqMessage_Request& from);
  PlayerReqMessage_Request(PlayerReqMessage_Request&& from) noexcept
    : PlayerReqMessage_Request() {
    *this = ::std::move(from);
  }

  inline PlayerReqMessage_Request& operator=(const PlayerReqMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerReqMessage_Request& operator=(PlayerReqMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerReqMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerReqMessage_Request* internal_default_instance() {
    return reinterpret_cast<const PlayerReqMessage_Request*>(
               &_PlayerReqMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerReqMessage_Request& a, PlayerReqMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerReqMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerReqMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerReqMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerReqMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerReqMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerReqMessage_Request& from) {
    PlayerReqMessage_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerReqMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerReqMessage.Request";
  }
  protected:
  explicit PlayerReqMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kAfterCountFieldNumber = 2,
    kChannelFieldNumber = 3,
  };
  // int64 msg_id = 1;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int32 after_count = 2;
  void clear_after_count();
  int32_t after_count() const;
  void set_after_count(int32_t value);
  private:
  int32_t _internal_after_count() const;
  void _internal_set_after_count(int32_t value);
  public:

  // int32 channel = 3;
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.PlayerReqMessage.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t msg_id_;
    int32_t after_count_;
    int32_t channel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PlayerReqMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerReqMessage.Response) */ {
 public:
  inline PlayerReqMessage_Response() : PlayerReqMessage_Response(nullptr) {}
  ~PlayerReqMessage_Response() override;
  explicit PROTOBUF_CONSTEXPR PlayerReqMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerReqMessage_Response(const PlayerReqMessage_Response& from);
  PlayerReqMessage_Response(PlayerReqMessage_Response&& from) noexcept
    : PlayerReqMessage_Response() {
    *this = ::std::move(from);
  }

  inline PlayerReqMessage_Response& operator=(const PlayerReqMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerReqMessage_Response& operator=(PlayerReqMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerReqMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerReqMessage_Response* internal_default_instance() {
    return reinterpret_cast<const PlayerReqMessage_Response*>(
               &_PlayerReqMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerReqMessage_Response& a, PlayerReqMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerReqMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerReqMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerReqMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerReqMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerReqMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerReqMessage_Response& from) {
    PlayerReqMessage_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerReqMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerReqMessage.Response";
  }
  protected:
  explicit PlayerReqMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kErrFieldNumber = 1,
  };
  // repeated .cs.ChatMessage msg = 2;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  ::cs::ChatMessage* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::ChatMessage >*
      mutable_msg();
  private:
  const ::cs::ChatMessage& _internal_msg(int index) const;
  ::cs::ChatMessage* _internal_add_msg();
  public:
  const ::cs::ChatMessage& msg(int index) const;
  ::cs::ChatMessage* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::ChatMessage >&
      msg() const;

  // int32 err = 1;
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.PlayerReqMessage.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::ChatMessage > msg_;
    int32_t err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PlayerReqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerReqMessage) */ {
 public:
  inline PlayerReqMessage() : PlayerReqMessage(nullptr) {}
  ~PlayerReqMessage() override;
  explicit PROTOBUF_CONSTEXPR PlayerReqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerReqMessage(const PlayerReqMessage& from);
  PlayerReqMessage(PlayerReqMessage&& from) noexcept
    : PlayerReqMessage() {
    *this = ::std::move(from);
  }

  inline PlayerReqMessage& operator=(const PlayerReqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerReqMessage& operator=(PlayerReqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerReqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerReqMessage* internal_default_instance() {
    return reinterpret_cast<const PlayerReqMessage*>(
               &_PlayerReqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerReqMessage& a, PlayerReqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerReqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerReqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerReqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerReqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerReqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerReqMessage& from) {
    PlayerReqMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerReqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerReqMessage";
  }
  protected:
  explicit PlayerReqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlayerReqMessage_Request Request;
  typedef PlayerReqMessage_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .cs.PlayerReqMessage.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::cs::PlayerReqMessage_Request& request() const;
  PROTOBUF_NODISCARD ::cs::PlayerReqMessage_Request* release_request();
  ::cs::PlayerReqMessage_Request* mutable_request();
  void set_allocated_request(::cs::PlayerReqMessage_Request* request);
  private:
  const ::cs::PlayerReqMessage_Request& _internal_request() const;
  ::cs::PlayerReqMessage_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::cs::PlayerReqMessage_Request* request);
  ::cs::PlayerReqMessage_Request* unsafe_arena_release_request();

  // .cs.PlayerReqMessage.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::cs::PlayerReqMessage_Response& response() const;
  PROTOBUF_NODISCARD ::cs::PlayerReqMessage_Response* release_response();
  ::cs::PlayerReqMessage_Response* mutable_response();
  void set_allocated_response(::cs::PlayerReqMessage_Response* response);
  private:
  const ::cs::PlayerReqMessage_Response& _internal_response() const;
  ::cs::PlayerReqMessage_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::cs::PlayerReqMessage_Response* response);
  ::cs::PlayerReqMessage_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:cs.PlayerReqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cs::PlayerReqMessage_Request* request_;
    ::cs::PlayerReqMessage_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerSendMessage_Request

// string msg = 1;
inline void PlayerSendMessage_Request::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& PlayerSendMessage_Request::msg() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.Request.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerSendMessage_Request::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cs.PlayerSendMessage.Request.msg)
}
inline std::string* PlayerSendMessage_Request::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cs.PlayerSendMessage.Request.msg)
  return _s;
}
inline const std::string& PlayerSendMessage_Request::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void PlayerSendMessage_Request::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerSendMessage_Request::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerSendMessage_Request::release_msg() {
  // @@protoc_insertion_point(field_release:cs.PlayerSendMessage.Request.msg)
  return _impl_.msg_.Release();
}
inline void PlayerSendMessage_Request::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cs.PlayerSendMessage.Request.msg)
}

// int32 emojiId = 2;
inline void PlayerSendMessage_Request::clear_emojiid() {
  _impl_.emojiid_ = 0;
}
inline int32_t PlayerSendMessage_Request::_internal_emojiid() const {
  return _impl_.emojiid_;
}
inline int32_t PlayerSendMessage_Request::emojiid() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.Request.emojiId)
  return _internal_emojiid();
}
inline void PlayerSendMessage_Request::_internal_set_emojiid(int32_t value) {
  
  _impl_.emojiid_ = value;
}
inline void PlayerSendMessage_Request::set_emojiid(int32_t value) {
  _internal_set_emojiid(value);
  // @@protoc_insertion_point(field_set:cs.PlayerSendMessage.Request.emojiId)
}

// int32 channel = 3;
inline void PlayerSendMessage_Request::clear_channel() {
  _impl_.channel_ = 0;
}
inline int32_t PlayerSendMessage_Request::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t PlayerSendMessage_Request::channel() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.Request.channel)
  return _internal_channel();
}
inline void PlayerSendMessage_Request::_internal_set_channel(int32_t value) {
  
  _impl_.channel_ = value;
}
inline void PlayerSendMessage_Request::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:cs.PlayerSendMessage.Request.channel)
}

// int32 chatId = 4;
inline void PlayerSendMessage_Request::clear_chatid() {
  _impl_.chatid_ = 0;
}
inline int32_t PlayerSendMessage_Request::_internal_chatid() const {
  return _impl_.chatid_;
}
inline int32_t PlayerSendMessage_Request::chatid() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.Request.chatId)
  return _internal_chatid();
}
inline void PlayerSendMessage_Request::_internal_set_chatid(int32_t value) {
  
  _impl_.chatid_ = value;
}
inline void PlayerSendMessage_Request::set_chatid(int32_t value) {
  _internal_set_chatid(value);
  // @@protoc_insertion_point(field_set:cs.PlayerSendMessage.Request.chatId)
}

// -------------------------------------------------------------------

// PlayerSendMessage_Response

// int32 err = 1;
inline void PlayerSendMessage_Response::clear_err() {
  _impl_.err_ = 0;
}
inline int32_t PlayerSendMessage_Response::_internal_err() const {
  return _impl_.err_;
}
inline int32_t PlayerSendMessage_Response::err() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.Response.err)
  return _internal_err();
}
inline void PlayerSendMessage_Response::_internal_set_err(int32_t value) {
  
  _impl_.err_ = value;
}
inline void PlayerSendMessage_Response::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:cs.PlayerSendMessage.Response.err)
}

// -------------------------------------------------------------------

// PlayerSendMessage

// .cs.PlayerSendMessage.Request request = 1;
inline bool PlayerSendMessage::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool PlayerSendMessage::has_request() const {
  return _internal_has_request();
}
inline void PlayerSendMessage::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::cs::PlayerSendMessage_Request& PlayerSendMessage::_internal_request() const {
  const ::cs::PlayerSendMessage_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::PlayerSendMessage_Request&>(
      ::cs::_PlayerSendMessage_Request_default_instance_);
}
inline const ::cs::PlayerSendMessage_Request& PlayerSendMessage::request() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.request)
  return _internal_request();
}
inline void PlayerSendMessage::unsafe_arena_set_allocated_request(
    ::cs::PlayerSendMessage_Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.PlayerSendMessage.request)
}
inline ::cs::PlayerSendMessage_Request* PlayerSendMessage::release_request() {
  
  ::cs::PlayerSendMessage_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::PlayerSendMessage_Request* PlayerSendMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:cs.PlayerSendMessage.request)
  
  ::cs::PlayerSendMessage_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::cs::PlayerSendMessage_Request* PlayerSendMessage::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::PlayerSendMessage_Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::cs::PlayerSendMessage_Request* PlayerSendMessage::mutable_request() {
  ::cs::PlayerSendMessage_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:cs.PlayerSendMessage.request)
  return _msg;
}
inline void PlayerSendMessage::set_allocated_request(::cs::PlayerSendMessage_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cs.PlayerSendMessage.request)
}

// .cs.PlayerSendMessage.Response response = 2;
inline bool PlayerSendMessage::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool PlayerSendMessage::has_response() const {
  return _internal_has_response();
}
inline void PlayerSendMessage::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::cs::PlayerSendMessage_Response& PlayerSendMessage::_internal_response() const {
  const ::cs::PlayerSendMessage_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::PlayerSendMessage_Response&>(
      ::cs::_PlayerSendMessage_Response_default_instance_);
}
inline const ::cs::PlayerSendMessage_Response& PlayerSendMessage::response() const {
  // @@protoc_insertion_point(field_get:cs.PlayerSendMessage.response)
  return _internal_response();
}
inline void PlayerSendMessage::unsafe_arena_set_allocated_response(
    ::cs::PlayerSendMessage_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.PlayerSendMessage.response)
}
inline ::cs::PlayerSendMessage_Response* PlayerSendMessage::release_response() {
  
  ::cs::PlayerSendMessage_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::PlayerSendMessage_Response* PlayerSendMessage::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:cs.PlayerSendMessage.response)
  
  ::cs::PlayerSendMessage_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::cs::PlayerSendMessage_Response* PlayerSendMessage::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::PlayerSendMessage_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::cs::PlayerSendMessage_Response* PlayerSendMessage::mutable_response() {
  ::cs::PlayerSendMessage_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:cs.PlayerSendMessage.response)
  return _msg;
}
inline void PlayerSendMessage::set_allocated_response(::cs::PlayerSendMessage_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cs.PlayerSendMessage.response)
}

// -------------------------------------------------------------------

// PlayerReqMessage_Request

// int64 msg_id = 1;
inline void PlayerReqMessage_Request::clear_msg_id() {
  _impl_.msg_id_ = int64_t{0};
}
inline int64_t PlayerReqMessage_Request::_internal_msg_id() const {
  return _impl_.msg_id_;
}
inline int64_t PlayerReqMessage_Request::msg_id() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.Request.msg_id)
  return _internal_msg_id();
}
inline void PlayerReqMessage_Request::_internal_set_msg_id(int64_t value) {
  
  _impl_.msg_id_ = value;
}
inline void PlayerReqMessage_Request::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:cs.PlayerReqMessage.Request.msg_id)
}

// int32 after_count = 2;
inline void PlayerReqMessage_Request::clear_after_count() {
  _impl_.after_count_ = 0;
}
inline int32_t PlayerReqMessage_Request::_internal_after_count() const {
  return _impl_.after_count_;
}
inline int32_t PlayerReqMessage_Request::after_count() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.Request.after_count)
  return _internal_after_count();
}
inline void PlayerReqMessage_Request::_internal_set_after_count(int32_t value) {
  
  _impl_.after_count_ = value;
}
inline void PlayerReqMessage_Request::set_after_count(int32_t value) {
  _internal_set_after_count(value);
  // @@protoc_insertion_point(field_set:cs.PlayerReqMessage.Request.after_count)
}

// int32 channel = 3;
inline void PlayerReqMessage_Request::clear_channel() {
  _impl_.channel_ = 0;
}
inline int32_t PlayerReqMessage_Request::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t PlayerReqMessage_Request::channel() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.Request.channel)
  return _internal_channel();
}
inline void PlayerReqMessage_Request::_internal_set_channel(int32_t value) {
  
  _impl_.channel_ = value;
}
inline void PlayerReqMessage_Request::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:cs.PlayerReqMessage.Request.channel)
}

// -------------------------------------------------------------------

// PlayerReqMessage_Response

// int32 err = 1;
inline void PlayerReqMessage_Response::clear_err() {
  _impl_.err_ = 0;
}
inline int32_t PlayerReqMessage_Response::_internal_err() const {
  return _impl_.err_;
}
inline int32_t PlayerReqMessage_Response::err() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.Response.err)
  return _internal_err();
}
inline void PlayerReqMessage_Response::_internal_set_err(int32_t value) {
  
  _impl_.err_ = value;
}
inline void PlayerReqMessage_Response::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:cs.PlayerReqMessage.Response.err)
}

// repeated .cs.ChatMessage msg = 2;
inline int PlayerReqMessage_Response::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int PlayerReqMessage_Response::msg_size() const {
  return _internal_msg_size();
}
inline ::cs::ChatMessage* PlayerReqMessage_Response::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:cs.PlayerReqMessage.Response.msg)
  return _impl_.msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::ChatMessage >*
PlayerReqMessage_Response::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:cs.PlayerReqMessage.Response.msg)
  return &_impl_.msg_;
}
inline const ::cs::ChatMessage& PlayerReqMessage_Response::_internal_msg(int index) const {
  return _impl_.msg_.Get(index);
}
inline const ::cs::ChatMessage& PlayerReqMessage_Response::msg(int index) const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.Response.msg)
  return _internal_msg(index);
}
inline ::cs::ChatMessage* PlayerReqMessage_Response::_internal_add_msg() {
  return _impl_.msg_.Add();
}
inline ::cs::ChatMessage* PlayerReqMessage_Response::add_msg() {
  ::cs::ChatMessage* _add = _internal_add_msg();
  // @@protoc_insertion_point(field_add:cs.PlayerReqMessage.Response.msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::ChatMessage >&
PlayerReqMessage_Response::msg() const {
  // @@protoc_insertion_point(field_list:cs.PlayerReqMessage.Response.msg)
  return _impl_.msg_;
}

// -------------------------------------------------------------------

// PlayerReqMessage

// .cs.PlayerReqMessage.Request request = 1;
inline bool PlayerReqMessage::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool PlayerReqMessage::has_request() const {
  return _internal_has_request();
}
inline void PlayerReqMessage::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::cs::PlayerReqMessage_Request& PlayerReqMessage::_internal_request() const {
  const ::cs::PlayerReqMessage_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::PlayerReqMessage_Request&>(
      ::cs::_PlayerReqMessage_Request_default_instance_);
}
inline const ::cs::PlayerReqMessage_Request& PlayerReqMessage::request() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.request)
  return _internal_request();
}
inline void PlayerReqMessage::unsafe_arena_set_allocated_request(
    ::cs::PlayerReqMessage_Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.PlayerReqMessage.request)
}
inline ::cs::PlayerReqMessage_Request* PlayerReqMessage::release_request() {
  
  ::cs::PlayerReqMessage_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::PlayerReqMessage_Request* PlayerReqMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:cs.PlayerReqMessage.request)
  
  ::cs::PlayerReqMessage_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::cs::PlayerReqMessage_Request* PlayerReqMessage::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::PlayerReqMessage_Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::cs::PlayerReqMessage_Request* PlayerReqMessage::mutable_request() {
  ::cs::PlayerReqMessage_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:cs.PlayerReqMessage.request)
  return _msg;
}
inline void PlayerReqMessage::set_allocated_request(::cs::PlayerReqMessage_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cs.PlayerReqMessage.request)
}

// .cs.PlayerReqMessage.Response response = 2;
inline bool PlayerReqMessage::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool PlayerReqMessage::has_response() const {
  return _internal_has_response();
}
inline void PlayerReqMessage::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::cs::PlayerReqMessage_Response& PlayerReqMessage::_internal_response() const {
  const ::cs::PlayerReqMessage_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::PlayerReqMessage_Response&>(
      ::cs::_PlayerReqMessage_Response_default_instance_);
}
inline const ::cs::PlayerReqMessage_Response& PlayerReqMessage::response() const {
  // @@protoc_insertion_point(field_get:cs.PlayerReqMessage.response)
  return _internal_response();
}
inline void PlayerReqMessage::unsafe_arena_set_allocated_response(
    ::cs::PlayerReqMessage_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.PlayerReqMessage.response)
}
inline ::cs::PlayerReqMessage_Response* PlayerReqMessage::release_response() {
  
  ::cs::PlayerReqMessage_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::PlayerReqMessage_Response* PlayerReqMessage::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:cs.PlayerReqMessage.response)
  
  ::cs::PlayerReqMessage_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::cs::PlayerReqMessage_Response* PlayerReqMessage::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::PlayerReqMessage_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::cs::PlayerReqMessage_Response* PlayerReqMessage::mutable_response() {
  ::cs::PlayerReqMessage_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:cs.PlayerReqMessage.response)
  return _msg;
}
inline void PlayerReqMessage::set_allocated_response(::cs::PlayerReqMessage_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cs.PlayerReqMessage.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
