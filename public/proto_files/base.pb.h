// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace cs {
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class EasyPlayerInfo;
struct EasyPlayerInfoDefaultTypeInternal;
extern EasyPlayerInfoDefaultTypeInternal _EasyPlayerInfo_default_instance_;
class PlayerChatInfo;
struct PlayerChatInfoDefaultTypeInternal;
extern PlayerChatInfoDefaultTypeInternal _PlayerChatInfo_default_instance_;
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> ::cs::ChatMessage* Arena::CreateMaybeMessage<::cs::ChatMessage>(Arena*);
template<> ::cs::EasyPlayerInfo* Arena::CreateMaybeMessage<::cs::EasyPlayerInfo>(Arena*);
template<> ::cs::PlayerChatInfo* Arena::CreateMaybeMessage<::cs::PlayerChatInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cs {

// ===================================================================

class EasyPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.EasyPlayerInfo) */ {
 public:
  inline EasyPlayerInfo() : EasyPlayerInfo(nullptr) {}
  ~EasyPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR EasyPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EasyPlayerInfo(const EasyPlayerInfo& from);
  EasyPlayerInfo(EasyPlayerInfo&& from) noexcept
    : EasyPlayerInfo() {
    *this = ::std::move(from);
  }

  inline EasyPlayerInfo& operator=(const EasyPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EasyPlayerInfo& operator=(EasyPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EasyPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EasyPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const EasyPlayerInfo*>(
               &_EasyPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EasyPlayerInfo& a, EasyPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EasyPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EasyPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EasyPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EasyPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EasyPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EasyPlayerInfo& from) {
    EasyPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EasyPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.EasyPlayerInfo";
  }
  protected:
  explicit EasyPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kProfileFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // string profile = 4;
  void clear_profile();
  const std::string& profile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile();
  PROTOBUF_NODISCARD std::string* release_profile();
  void set_allocated_profile(std::string* profile);
  private:
  const std::string& _internal_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile(const std::string& value);
  std::string* _internal_mutable_profile();
  public:

  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.EasyPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_;
    int64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class PlayerChatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.PlayerChatInfo) */ {
 public:
  inline PlayerChatInfo() : PlayerChatInfo(nullptr) {}
  ~PlayerChatInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerChatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerChatInfo(const PlayerChatInfo& from);
  PlayerChatInfo(PlayerChatInfo&& from) noexcept
    : PlayerChatInfo() {
    *this = ::std::move(from);
  }

  inline PlayerChatInfo& operator=(const PlayerChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerChatInfo& operator=(PlayerChatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerChatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerChatInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerChatInfo*>(
               &_PlayerChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerChatInfo& a, PlayerChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerChatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerChatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerChatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerChatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerChatInfo& from) {
    PlayerChatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerChatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.PlayerChatInfo";
  }
  protected:
  explicit PlayerChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatCoolDownFieldNumber = 3,
    kBlockPlayerFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kMuteEndTimeFieldNumber = 2,
  };
  // repeated int64 chat_cool_down = 3;
  int chat_cool_down_size() const;
  private:
  int _internal_chat_cool_down_size() const;
  public:
  void clear_chat_cool_down();
  private:
  int64_t _internal_chat_cool_down(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_chat_cool_down() const;
  void _internal_add_chat_cool_down(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_chat_cool_down();
  public:
  int64_t chat_cool_down(int index) const;
  void set_chat_cool_down(int index, int64_t value);
  void add_chat_cool_down(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      chat_cool_down() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_chat_cool_down();

  // repeated .cs.EasyPlayerInfo block_player = 4;
  int block_player_size() const;
  private:
  int _internal_block_player_size() const;
  public:
  void clear_block_player();
  ::cs::EasyPlayerInfo* mutable_block_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::EasyPlayerInfo >*
      mutable_block_player();
  private:
  const ::cs::EasyPlayerInfo& _internal_block_player(int index) const;
  ::cs::EasyPlayerInfo* _internal_add_block_player();
  public:
  const ::cs::EasyPlayerInfo& block_player(int index) const;
  ::cs::EasyPlayerInfo* add_block_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::EasyPlayerInfo >&
      block_player() const;

  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // int64 mute_end_time = 2;
  void clear_mute_end_time();
  int64_t mute_end_time() const;
  void set_mute_end_time(int64_t value);
  private:
  int64_t _internal_mute_end_time() const;
  void _internal_set_mute_end_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.PlayerChatInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > chat_cool_down_;
    mutable std::atomic<int> _chat_cool_down_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::EasyPlayerInfo > block_player_;
    int64_t player_id_;
    int64_t mute_end_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMessage(const ChatMessage& from);
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.ChatMessage";
  }
  protected:
  explicit ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerInfoFieldNumber = 8,
    kPlayerIdFieldNumber = 1,
    kEmojiIdFieldNumber = 3,
    kChannelIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kMsgIdFieldNumber = 6,
    kChatIdFieldNumber = 7,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .cs.EasyPlayerInfo player_info = 8;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::cs::EasyPlayerInfo& player_info() const;
  PROTOBUF_NODISCARD ::cs::EasyPlayerInfo* release_player_info();
  ::cs::EasyPlayerInfo* mutable_player_info();
  void set_allocated_player_info(::cs::EasyPlayerInfo* player_info);
  private:
  const ::cs::EasyPlayerInfo& _internal_player_info() const;
  ::cs::EasyPlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::cs::EasyPlayerInfo* player_info);
  ::cs::EasyPlayerInfo* unsafe_arena_release_player_info();

  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // int32 emoji_id = 3;
  void clear_emoji_id();
  int32_t emoji_id() const;
  void set_emoji_id(int32_t value);
  private:
  int32_t _internal_emoji_id() const;
  void _internal_set_emoji_id(int32_t value);
  public:

  // int32 channel_id = 4;
  void clear_channel_id();
  int32_t channel_id() const;
  void set_channel_id(int32_t value);
  private:
  int32_t _internal_channel_id() const;
  void _internal_set_channel_id(int32_t value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 msg_id = 6;
  void clear_msg_id();
  int64_t msg_id() const;
  void set_msg_id(int64_t value);
  private:
  int64_t _internal_msg_id() const;
  void _internal_set_msg_id(int64_t value);
  public:

  // int64 chat_id = 7;
  void clear_chat_id();
  int64_t chat_id() const;
  void set_chat_id(int64_t value);
  private:
  int64_t _internal_chat_id() const;
  void _internal_set_chat_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::cs::EasyPlayerInfo* player_info_;
    int64_t player_id_;
    int32_t emoji_id_;
    int32_t channel_id_;
    int64_t timestamp_;
    int64_t msg_id_;
    int64_t chat_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EasyPlayerInfo

// int64 player_id = 1;
inline void EasyPlayerInfo::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t EasyPlayerInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t EasyPlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:cs.EasyPlayerInfo.player_id)
  return _internal_player_id();
}
inline void EasyPlayerInfo::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void EasyPlayerInfo::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:cs.EasyPlayerInfo.player_id)
}

// string name = 2;
inline void EasyPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EasyPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:cs.EasyPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EasyPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cs.EasyPlayerInfo.name)
}
inline std::string* EasyPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cs.EasyPlayerInfo.name)
  return _s;
}
inline const std::string& EasyPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EasyPlayerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:cs.EasyPlayerInfo.name)
  return _impl_.name_.Release();
}
inline void EasyPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cs.EasyPlayerInfo.name)
}

// string avatar = 3;
inline void EasyPlayerInfo::clear_avatar() {
  _impl_.avatar_.ClearToEmpty();
}
inline const std::string& EasyPlayerInfo::avatar() const {
  // @@protoc_insertion_point(field_get:cs.EasyPlayerInfo.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EasyPlayerInfo::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cs.EasyPlayerInfo.avatar)
}
inline std::string* EasyPlayerInfo::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:cs.EasyPlayerInfo.avatar)
  return _s;
}
inline const std::string& EasyPlayerInfo::_internal_avatar() const {
  return _impl_.avatar_.Get();
}
inline void EasyPlayerInfo::_internal_set_avatar(const std::string& value) {
  
  _impl_.avatar_.Set(value, GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::_internal_mutable_avatar() {
  
  return _impl_.avatar_.Mutable(GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:cs.EasyPlayerInfo.avatar)
  return _impl_.avatar_.Release();
}
inline void EasyPlayerInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_.SetAllocated(avatar, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_.IsDefault()) {
    _impl_.avatar_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cs.EasyPlayerInfo.avatar)
}

// string profile = 4;
inline void EasyPlayerInfo::clear_profile() {
  _impl_.profile_.ClearToEmpty();
}
inline const std::string& EasyPlayerInfo::profile() const {
  // @@protoc_insertion_point(field_get:cs.EasyPlayerInfo.profile)
  return _internal_profile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EasyPlayerInfo::set_profile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.profile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cs.EasyPlayerInfo.profile)
}
inline std::string* EasyPlayerInfo::mutable_profile() {
  std::string* _s = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:cs.EasyPlayerInfo.profile)
  return _s;
}
inline const std::string& EasyPlayerInfo::_internal_profile() const {
  return _impl_.profile_.Get();
}
inline void EasyPlayerInfo::_internal_set_profile(const std::string& value) {
  
  _impl_.profile_.Set(value, GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::_internal_mutable_profile() {
  
  return _impl_.profile_.Mutable(GetArenaForAllocation());
}
inline std::string* EasyPlayerInfo::release_profile() {
  // @@protoc_insertion_point(field_release:cs.EasyPlayerInfo.profile)
  return _impl_.profile_.Release();
}
inline void EasyPlayerInfo::set_allocated_profile(std::string* profile) {
  if (profile != nullptr) {
    
  } else {
    
  }
  _impl_.profile_.SetAllocated(profile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.profile_.IsDefault()) {
    _impl_.profile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cs.EasyPlayerInfo.profile)
}

// -------------------------------------------------------------------

// PlayerChatInfo

// int64 player_id = 1;
inline void PlayerChatInfo::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t PlayerChatInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t PlayerChatInfo::player_id() const {
  // @@protoc_insertion_point(field_get:cs.PlayerChatInfo.player_id)
  return _internal_player_id();
}
inline void PlayerChatInfo::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void PlayerChatInfo::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:cs.PlayerChatInfo.player_id)
}

// int64 mute_end_time = 2;
inline void PlayerChatInfo::clear_mute_end_time() {
  _impl_.mute_end_time_ = int64_t{0};
}
inline int64_t PlayerChatInfo::_internal_mute_end_time() const {
  return _impl_.mute_end_time_;
}
inline int64_t PlayerChatInfo::mute_end_time() const {
  // @@protoc_insertion_point(field_get:cs.PlayerChatInfo.mute_end_time)
  return _internal_mute_end_time();
}
inline void PlayerChatInfo::_internal_set_mute_end_time(int64_t value) {
  
  _impl_.mute_end_time_ = value;
}
inline void PlayerChatInfo::set_mute_end_time(int64_t value) {
  _internal_set_mute_end_time(value);
  // @@protoc_insertion_point(field_set:cs.PlayerChatInfo.mute_end_time)
}

// repeated int64 chat_cool_down = 3;
inline int PlayerChatInfo::_internal_chat_cool_down_size() const {
  return _impl_.chat_cool_down_.size();
}
inline int PlayerChatInfo::chat_cool_down_size() const {
  return _internal_chat_cool_down_size();
}
inline void PlayerChatInfo::clear_chat_cool_down() {
  _impl_.chat_cool_down_.Clear();
}
inline int64_t PlayerChatInfo::_internal_chat_cool_down(int index) const {
  return _impl_.chat_cool_down_.Get(index);
}
inline int64_t PlayerChatInfo::chat_cool_down(int index) const {
  // @@protoc_insertion_point(field_get:cs.PlayerChatInfo.chat_cool_down)
  return _internal_chat_cool_down(index);
}
inline void PlayerChatInfo::set_chat_cool_down(int index, int64_t value) {
  _impl_.chat_cool_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:cs.PlayerChatInfo.chat_cool_down)
}
inline void PlayerChatInfo::_internal_add_chat_cool_down(int64_t value) {
  _impl_.chat_cool_down_.Add(value);
}
inline void PlayerChatInfo::add_chat_cool_down(int64_t value) {
  _internal_add_chat_cool_down(value);
  // @@protoc_insertion_point(field_add:cs.PlayerChatInfo.chat_cool_down)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PlayerChatInfo::_internal_chat_cool_down() const {
  return _impl_.chat_cool_down_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
PlayerChatInfo::chat_cool_down() const {
  // @@protoc_insertion_point(field_list:cs.PlayerChatInfo.chat_cool_down)
  return _internal_chat_cool_down();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PlayerChatInfo::_internal_mutable_chat_cool_down() {
  return &_impl_.chat_cool_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
PlayerChatInfo::mutable_chat_cool_down() {
  // @@protoc_insertion_point(field_mutable_list:cs.PlayerChatInfo.chat_cool_down)
  return _internal_mutable_chat_cool_down();
}

// repeated .cs.EasyPlayerInfo block_player = 4;
inline int PlayerChatInfo::_internal_block_player_size() const {
  return _impl_.block_player_.size();
}
inline int PlayerChatInfo::block_player_size() const {
  return _internal_block_player_size();
}
inline void PlayerChatInfo::clear_block_player() {
  _impl_.block_player_.Clear();
}
inline ::cs::EasyPlayerInfo* PlayerChatInfo::mutable_block_player(int index) {
  // @@protoc_insertion_point(field_mutable:cs.PlayerChatInfo.block_player)
  return _impl_.block_player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::EasyPlayerInfo >*
PlayerChatInfo::mutable_block_player() {
  // @@protoc_insertion_point(field_mutable_list:cs.PlayerChatInfo.block_player)
  return &_impl_.block_player_;
}
inline const ::cs::EasyPlayerInfo& PlayerChatInfo::_internal_block_player(int index) const {
  return _impl_.block_player_.Get(index);
}
inline const ::cs::EasyPlayerInfo& PlayerChatInfo::block_player(int index) const {
  // @@protoc_insertion_point(field_get:cs.PlayerChatInfo.block_player)
  return _internal_block_player(index);
}
inline ::cs::EasyPlayerInfo* PlayerChatInfo::_internal_add_block_player() {
  return _impl_.block_player_.Add();
}
inline ::cs::EasyPlayerInfo* PlayerChatInfo::add_block_player() {
  ::cs::EasyPlayerInfo* _add = _internal_add_block_player();
  // @@protoc_insertion_point(field_add:cs.PlayerChatInfo.block_player)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cs::EasyPlayerInfo >&
PlayerChatInfo::block_player() const {
  // @@protoc_insertion_point(field_list:cs.PlayerChatInfo.block_player)
  return _impl_.block_player_;
}

// -------------------------------------------------------------------

// ChatMessage

// int64 player_id = 1;
inline void ChatMessage::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t ChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.player_id)
  return _internal_player_id();
}
inline void ChatMessage::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void ChatMessage::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.player_id)
}

// string msg = 2;
inline void ChatMessage::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ChatMessage::msg() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMessage::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cs.ChatMessage.msg)
}
inline std::string* ChatMessage::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cs.ChatMessage.msg)
  return _s;
}
inline const std::string& ChatMessage::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void ChatMessage::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatMessage::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatMessage::release_msg() {
  // @@protoc_insertion_point(field_release:cs.ChatMessage.msg)
  return _impl_.msg_.Release();
}
inline void ChatMessage::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cs.ChatMessage.msg)
}

// int32 emoji_id = 3;
inline void ChatMessage::clear_emoji_id() {
  _impl_.emoji_id_ = 0;
}
inline int32_t ChatMessage::_internal_emoji_id() const {
  return _impl_.emoji_id_;
}
inline int32_t ChatMessage::emoji_id() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.emoji_id)
  return _internal_emoji_id();
}
inline void ChatMessage::_internal_set_emoji_id(int32_t value) {
  
  _impl_.emoji_id_ = value;
}
inline void ChatMessage::set_emoji_id(int32_t value) {
  _internal_set_emoji_id(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.emoji_id)
}

// int32 channel_id = 4;
inline void ChatMessage::clear_channel_id() {
  _impl_.channel_id_ = 0;
}
inline int32_t ChatMessage::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline int32_t ChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.channel_id)
  return _internal_channel_id();
}
inline void ChatMessage::_internal_set_channel_id(int32_t value) {
  
  _impl_.channel_id_ = value;
}
inline void ChatMessage::set_channel_id(int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.channel_id)
}

// int64 timestamp = 5;
inline void ChatMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t ChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void ChatMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.timestamp)
}

// int64 msg_id = 6;
inline void ChatMessage::clear_msg_id() {
  _impl_.msg_id_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_msg_id() const {
  return _impl_.msg_id_;
}
inline int64_t ChatMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.msg_id)
  return _internal_msg_id();
}
inline void ChatMessage::_internal_set_msg_id(int64_t value) {
  
  _impl_.msg_id_ = value;
}
inline void ChatMessage::set_msg_id(int64_t value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.msg_id)
}

// int64 chat_id = 7;
inline void ChatMessage::clear_chat_id() {
  _impl_.chat_id_ = int64_t{0};
}
inline int64_t ChatMessage::_internal_chat_id() const {
  return _impl_.chat_id_;
}
inline int64_t ChatMessage::chat_id() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.chat_id)
  return _internal_chat_id();
}
inline void ChatMessage::_internal_set_chat_id(int64_t value) {
  
  _impl_.chat_id_ = value;
}
inline void ChatMessage::set_chat_id(int64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:cs.ChatMessage.chat_id)
}

// .cs.EasyPlayerInfo player_info = 8;
inline bool ChatMessage::_internal_has_player_info() const {
  return this != internal_default_instance() && _impl_.player_info_ != nullptr;
}
inline bool ChatMessage::has_player_info() const {
  return _internal_has_player_info();
}
inline void ChatMessage::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_info_ != nullptr) {
    delete _impl_.player_info_;
  }
  _impl_.player_info_ = nullptr;
}
inline const ::cs::EasyPlayerInfo& ChatMessage::_internal_player_info() const {
  const ::cs::EasyPlayerInfo* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::EasyPlayerInfo&>(
      ::cs::_EasyPlayerInfo_default_instance_);
}
inline const ::cs::EasyPlayerInfo& ChatMessage::player_info() const {
  // @@protoc_insertion_point(field_get:cs.ChatMessage.player_info)
  return _internal_player_info();
}
inline void ChatMessage::unsafe_arena_set_allocated_player_info(
    ::cs::EasyPlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.ChatMessage.player_info)
}
inline ::cs::EasyPlayerInfo* ChatMessage::release_player_info() {
  
  ::cs::EasyPlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::EasyPlayerInfo* ChatMessage::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:cs.ChatMessage.player_info)
  
  ::cs::EasyPlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::cs::EasyPlayerInfo* ChatMessage::_internal_mutable_player_info() {
  
  if (_impl_.player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::EasyPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_ = p;
  }
  return _impl_.player_info_;
}
inline ::cs::EasyPlayerInfo* ChatMessage::mutable_player_info() {
  ::cs::EasyPlayerInfo* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:cs.ChatMessage.player_info)
  return _msg;
}
inline void ChatMessage::set_allocated_player_info(::cs::EasyPlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:cs.ChatMessage.player_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
