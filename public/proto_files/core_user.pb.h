// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_5fuser_2eproto;
namespace core {
class UserDataInfo;
struct UserDataInfoDefaultTypeInternal;
extern UserDataInfoDefaultTypeInternal _UserDataInfo_default_instance_;
class UsrSvrMappingData;
struct UsrSvrMappingDataDefaultTypeInternal;
extern UsrSvrMappingDataDefaultTypeInternal _UsrSvrMappingData_default_instance_;
class UsrSvrMappingData_MappingEntry_DoNotUse;
struct UsrSvrMappingData_MappingEntry_DoNotUseDefaultTypeInternal;
extern UsrSvrMappingData_MappingEntry_DoNotUseDefaultTypeInternal _UsrSvrMappingData_MappingEntry_DoNotUse_default_instance_;
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> ::core::UserDataInfo* Arena::CreateMaybeMessage<::core::UserDataInfo>(Arena*);
template<> ::core::UsrSvrMappingData* Arena::CreateMaybeMessage<::core::UsrSvrMappingData>(Arena*);
template<> ::core::UsrSvrMappingData_MappingEntry_DoNotUse* Arena::CreateMaybeMessage<::core::UsrSvrMappingData_MappingEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace core {

// ===================================================================

class UsrSvrMappingData_MappingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UsrSvrMappingData_MappingEntry_DoNotUse, 
    int32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UsrSvrMappingData_MappingEntry_DoNotUse, 
    int32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UsrSvrMappingData_MappingEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR UsrSvrMappingData_MappingEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UsrSvrMappingData_MappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UsrSvrMappingData_MappingEntry_DoNotUse& other);
  static const UsrSvrMappingData_MappingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UsrSvrMappingData_MappingEntry_DoNotUse*>(&_UsrSvrMappingData_MappingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_core_5fuser_2eproto;
};

// -------------------------------------------------------------------

class UsrSvrMappingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.UsrSvrMappingData) */ {
 public:
  inline UsrSvrMappingData() : UsrSvrMappingData(nullptr) {}
  ~UsrSvrMappingData() override;
  explicit PROTOBUF_CONSTEXPR UsrSvrMappingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsrSvrMappingData(const UsrSvrMappingData& from);
  UsrSvrMappingData(UsrSvrMappingData&& from) noexcept
    : UsrSvrMappingData() {
    *this = ::std::move(from);
  }

  inline UsrSvrMappingData& operator=(const UsrSvrMappingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsrSvrMappingData& operator=(UsrSvrMappingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsrSvrMappingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsrSvrMappingData* internal_default_instance() {
    return reinterpret_cast<const UsrSvrMappingData*>(
               &_UsrSvrMappingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UsrSvrMappingData& a, UsrSvrMappingData& b) {
    a.Swap(&b);
  }
  inline void Swap(UsrSvrMappingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsrSvrMappingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsrSvrMappingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsrSvrMappingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsrSvrMappingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UsrSvrMappingData& from) {
    UsrSvrMappingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsrSvrMappingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.UsrSvrMappingData";
  }
  protected:
  explicit UsrSvrMappingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMappingFieldNumber = 4,
    kVerFieldNumber = 1,
    kUptTimeFieldNumber = 2,
    kConnidFieldNumber = 3,
  };
  // map<int32, uint32> mapping = 4;
  int mapping_size() const;
  private:
  int _internal_mapping_size() const;
  public:
  void clear_mapping();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >&
      _internal_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >*
      _internal_mutable_mapping();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >&
      mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >*
      mutable_mapping();

  // int64 ver = 1;
  void clear_ver();
  int64_t ver() const;
  void set_ver(int64_t value);
  private:
  int64_t _internal_ver() const;
  void _internal_set_ver(int64_t value);
  public:

  // int64 upt_time = 2;
  void clear_upt_time();
  int64_t upt_time() const;
  void set_upt_time(int64_t value);
  private:
  int64_t _internal_upt_time() const;
  void _internal_set_upt_time(int64_t value);
  public:

  // int64 connid = 3;
  void clear_connid();
  int64_t connid() const;
  void set_connid(int64_t value);
  private:
  int64_t _internal_connid() const;
  void _internal_set_connid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:core.UsrSvrMappingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        UsrSvrMappingData_MappingEntry_DoNotUse,
        int32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> mapping_;
    int64_t ver_;
    int64_t upt_time_;
    int64_t connid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserDataInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:core.UserDataInfo) */ {
 public:
  inline UserDataInfo() : UserDataInfo(nullptr) {}
  ~UserDataInfo() override;
  explicit PROTOBUF_CONSTEXPR UserDataInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDataInfo(const UserDataInfo& from);
  UserDataInfo(UserDataInfo&& from) noexcept
    : UserDataInfo() {
    *this = ::std::move(from);
  }

  inline UserDataInfo& operator=(const UserDataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDataInfo& operator=(UserDataInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserDataInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDataInfo* internal_default_instance() {
    return reinterpret_cast<const UserDataInfo*>(
               &_UserDataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserDataInfo& a, UserDataInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDataInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDataInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserDataInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserDataInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserDataInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserDataInfo& from) {
    UserDataInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDataInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "core.UserDataInfo";
  }
  protected:
  explicit UserDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountidFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
    kStateFieldNumber = 3,
    kOnlineFieldNumber = 4,
    kLastHeartbeatTimeFieldNumber = 5,
  };
  // int64 accountid = 1;
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // int64 expire_time = 2;
  void clear_expire_time();
  int64_t expire_time() const;
  void set_expire_time(int64_t value);
  private:
  int64_t _internal_expire_time() const;
  void _internal_set_expire_time(int64_t value);
  public:

  // int32 state = 3;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // bool online = 4;
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // int64 last_heartbeat_time = 5;
  void clear_last_heartbeat_time();
  int64_t last_heartbeat_time() const;
  void set_last_heartbeat_time(int64_t value);
  private:
  int64_t _internal_last_heartbeat_time() const;
  void _internal_set_last_heartbeat_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:core.UserDataInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t accountid_;
    int64_t expire_time_;
    int32_t state_;
    bool online_;
    int64_t last_heartbeat_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UsrSvrMappingData

// int64 ver = 1;
inline void UsrSvrMappingData::clear_ver() {
  _impl_.ver_ = int64_t{0};
}
inline int64_t UsrSvrMappingData::_internal_ver() const {
  return _impl_.ver_;
}
inline int64_t UsrSvrMappingData::ver() const {
  // @@protoc_insertion_point(field_get:core.UsrSvrMappingData.ver)
  return _internal_ver();
}
inline void UsrSvrMappingData::_internal_set_ver(int64_t value) {
  
  _impl_.ver_ = value;
}
inline void UsrSvrMappingData::set_ver(int64_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:core.UsrSvrMappingData.ver)
}

// int64 upt_time = 2;
inline void UsrSvrMappingData::clear_upt_time() {
  _impl_.upt_time_ = int64_t{0};
}
inline int64_t UsrSvrMappingData::_internal_upt_time() const {
  return _impl_.upt_time_;
}
inline int64_t UsrSvrMappingData::upt_time() const {
  // @@protoc_insertion_point(field_get:core.UsrSvrMappingData.upt_time)
  return _internal_upt_time();
}
inline void UsrSvrMappingData::_internal_set_upt_time(int64_t value) {
  
  _impl_.upt_time_ = value;
}
inline void UsrSvrMappingData::set_upt_time(int64_t value) {
  _internal_set_upt_time(value);
  // @@protoc_insertion_point(field_set:core.UsrSvrMappingData.upt_time)
}

// int64 connid = 3;
inline void UsrSvrMappingData::clear_connid() {
  _impl_.connid_ = int64_t{0};
}
inline int64_t UsrSvrMappingData::_internal_connid() const {
  return _impl_.connid_;
}
inline int64_t UsrSvrMappingData::connid() const {
  // @@protoc_insertion_point(field_get:core.UsrSvrMappingData.connid)
  return _internal_connid();
}
inline void UsrSvrMappingData::_internal_set_connid(int64_t value) {
  
  _impl_.connid_ = value;
}
inline void UsrSvrMappingData::set_connid(int64_t value) {
  _internal_set_connid(value);
  // @@protoc_insertion_point(field_set:core.UsrSvrMappingData.connid)
}

// map<int32, uint32> mapping = 4;
inline int UsrSvrMappingData::_internal_mapping_size() const {
  return _impl_.mapping_.size();
}
inline int UsrSvrMappingData::mapping_size() const {
  return _internal_mapping_size();
}
inline void UsrSvrMappingData::clear_mapping() {
  _impl_.mapping_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >&
UsrSvrMappingData::_internal_mapping() const {
  return _impl_.mapping_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >&
UsrSvrMappingData::mapping() const {
  // @@protoc_insertion_point(field_map:core.UsrSvrMappingData.mapping)
  return _internal_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >*
UsrSvrMappingData::_internal_mutable_mapping() {
  return _impl_.mapping_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, uint32_t >*
UsrSvrMappingData::mutable_mapping() {
  // @@protoc_insertion_point(field_mutable_map:core.UsrSvrMappingData.mapping)
  return _internal_mutable_mapping();
}

// -------------------------------------------------------------------

// UserDataInfo

// int64 accountid = 1;
inline void UserDataInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
}
inline int64_t UserDataInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t UserDataInfo::accountid() const {
  // @@protoc_insertion_point(field_get:core.UserDataInfo.accountid)
  return _internal_accountid();
}
inline void UserDataInfo::_internal_set_accountid(int64_t value) {
  
  _impl_.accountid_ = value;
}
inline void UserDataInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:core.UserDataInfo.accountid)
}

// int64 expire_time = 2;
inline void UserDataInfo::clear_expire_time() {
  _impl_.expire_time_ = int64_t{0};
}
inline int64_t UserDataInfo::_internal_expire_time() const {
  return _impl_.expire_time_;
}
inline int64_t UserDataInfo::expire_time() const {
  // @@protoc_insertion_point(field_get:core.UserDataInfo.expire_time)
  return _internal_expire_time();
}
inline void UserDataInfo::_internal_set_expire_time(int64_t value) {
  
  _impl_.expire_time_ = value;
}
inline void UserDataInfo::set_expire_time(int64_t value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:core.UserDataInfo.expire_time)
}

// int32 state = 3;
inline void UserDataInfo::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t UserDataInfo::_internal_state() const {
  return _impl_.state_;
}
inline int32_t UserDataInfo::state() const {
  // @@protoc_insertion_point(field_get:core.UserDataInfo.state)
  return _internal_state();
}
inline void UserDataInfo::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void UserDataInfo::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:core.UserDataInfo.state)
}

// bool online = 4;
inline void UserDataInfo::clear_online() {
  _impl_.online_ = false;
}
inline bool UserDataInfo::_internal_online() const {
  return _impl_.online_;
}
inline bool UserDataInfo::online() const {
  // @@protoc_insertion_point(field_get:core.UserDataInfo.online)
  return _internal_online();
}
inline void UserDataInfo::_internal_set_online(bool value) {
  
  _impl_.online_ = value;
}
inline void UserDataInfo::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:core.UserDataInfo.online)
}

// int64 last_heartbeat_time = 5;
inline void UserDataInfo::clear_last_heartbeat_time() {
  _impl_.last_heartbeat_time_ = int64_t{0};
}
inline int64_t UserDataInfo::_internal_last_heartbeat_time() const {
  return _impl_.last_heartbeat_time_;
}
inline int64_t UserDataInfo::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:core.UserDataInfo.last_heartbeat_time)
  return _internal_last_heartbeat_time();
}
inline void UserDataInfo::_internal_set_last_heartbeat_time(int64_t value) {
  
  _impl_.last_heartbeat_time_ = value;
}
inline void UserDataInfo::set_last_heartbeat_time(int64_t value) {
  _internal_set_last_heartbeat_time(value);
  // @@protoc_insertion_point(field_set:core.UserDataInfo.last_heartbeat_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_5fuser_2eproto
