// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_update.proto

#include "config_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cs {
constexpr ConfigUpdate_Request::ConfigUpdate_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_file_(){}
struct ConfigUpdate_RequestDefaultTypeInternal {
  constexpr ConfigUpdate_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigUpdate_RequestDefaultTypeInternal() {}
  union {
    ConfigUpdate_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigUpdate_RequestDefaultTypeInternal _ConfigUpdate_Request_default_instance_;
constexpr ConfigUpdate_Response::ConfigUpdate_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : err_(0){}
struct ConfigUpdate_ResponseDefaultTypeInternal {
  constexpr ConfigUpdate_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigUpdate_ResponseDefaultTypeInternal() {}
  union {
    ConfigUpdate_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigUpdate_ResponseDefaultTypeInternal _ConfigUpdate_Response_default_instance_;
constexpr ConfigUpdate::ConfigUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(nullptr)
  , response_(nullptr){}
struct ConfigUpdateDefaultTypeInternal {
  constexpr ConfigUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigUpdateDefaultTypeInternal() {}
  union {
    ConfigUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigUpdateDefaultTypeInternal _ConfigUpdate_default_instance_;
}  // namespace cs
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_5fupdate_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_5fupdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_5fupdate_2eproto = nullptr;

const uint32_t TableStruct_config_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate_Request, update_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate_Response, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate, request_),
  PROTOBUF_FIELD_OFFSET(::cs::ConfigUpdate, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cs::ConfigUpdate_Request)},
  { 7, -1, -1, sizeof(::cs::ConfigUpdate_Response)},
  { 14, -1, -1, sizeof(::cs::ConfigUpdate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_ConfigUpdate_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_ConfigUpdate_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cs::_ConfigUpdate_default_instance_),
};

const char descriptor_table_protodef_config_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023config_update.proto\022\002cs\032\nbase.proto\"\237\001"
  "\n\014ConfigUpdate\022)\n\007request\030\001 \001(\0132\030.cs.Con"
  "figUpdate.Request\022+\n\010response\030\002 \001(\0132\031.cs"
  ".ConfigUpdate.Response\032\036\n\007Request\022\023\n\013upd"
  "ate_file\030\001 \003(\t\032\027\n\010Response\022\013\n\003err\030\001 \001(\005b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_5fupdate_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_5fupdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fupdate_2eproto = {
  false, false, 207, descriptor_table_protodef_config_5fupdate_2eproto, "config_update.proto", 
  &descriptor_table_config_5fupdate_2eproto_once, descriptor_table_config_5fupdate_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_config_5fupdate_2eproto::offsets,
  file_level_metadata_config_5fupdate_2eproto, file_level_enum_descriptors_config_5fupdate_2eproto, file_level_service_descriptors_config_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_config_5fupdate_2eproto_getter() {
  return &descriptor_table_config_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_config_5fupdate_2eproto(&descriptor_table_config_5fupdate_2eproto);
namespace cs {

// ===================================================================

class ConfigUpdate_Request::_Internal {
 public:
};

ConfigUpdate_Request::ConfigUpdate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  update_file_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cs.ConfigUpdate.Request)
}
ConfigUpdate_Request::ConfigUpdate_Request(const ConfigUpdate_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      update_file_(from.update_file_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cs.ConfigUpdate.Request)
}

inline void ConfigUpdate_Request::SharedCtor() {
}

ConfigUpdate_Request::~ConfigUpdate_Request() {
  // @@protoc_insertion_point(destructor:cs.ConfigUpdate.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigUpdate_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigUpdate_Request::ArenaDtor(void* object) {
  ConfigUpdate_Request* _this = reinterpret_cast< ConfigUpdate_Request* >(object);
  (void)_this;
}
void ConfigUpdate_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdate_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigUpdate_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.ConfigUpdate.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_file_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdate_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string update_file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_update_file();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cs.ConfigUpdate.Request.update_file"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigUpdate_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.ConfigUpdate.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string update_file = 1;
  for (int i = 0, n = this->_internal_update_file_size(); i < n; i++) {
    const auto& s = this->_internal_update_file(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cs.ConfigUpdate.Request.update_file");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.ConfigUpdate.Request)
  return target;
}

size_t ConfigUpdate_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.ConfigUpdate.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string update_file = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(update_file_.size());
  for (int i = 0, n = update_file_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      update_file_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigUpdate_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigUpdate_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigUpdate_Request::GetClassData() const { return &_class_data_; }

void ConfigUpdate_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigUpdate_Request *>(to)->MergeFrom(
      static_cast<const ConfigUpdate_Request &>(from));
}


void ConfigUpdate_Request::MergeFrom(const ConfigUpdate_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.ConfigUpdate.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  update_file_.MergeFrom(from.update_file_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdate_Request::CopyFrom(const ConfigUpdate_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.ConfigUpdate.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdate_Request::IsInitialized() const {
  return true;
}

void ConfigUpdate_Request::InternalSwap(ConfigUpdate_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  update_file_.InternalSwap(&other->update_file_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdate_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_5fupdate_2eproto_getter, &descriptor_table_config_5fupdate_2eproto_once,
      file_level_metadata_config_5fupdate_2eproto[0]);
}

// ===================================================================

class ConfigUpdate_Response::_Internal {
 public:
};

ConfigUpdate_Response::ConfigUpdate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cs.ConfigUpdate.Response)
}
ConfigUpdate_Response::ConfigUpdate_Response(const ConfigUpdate_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:cs.ConfigUpdate.Response)
}

inline void ConfigUpdate_Response::SharedCtor() {
err_ = 0;
}

ConfigUpdate_Response::~ConfigUpdate_Response() {
  // @@protoc_insertion_point(destructor:cs.ConfigUpdate.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigUpdate_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigUpdate_Response::ArenaDtor(void* object) {
  ConfigUpdate_Response* _this = reinterpret_cast< ConfigUpdate_Response* >(object);
  (void)_this;
}
void ConfigUpdate_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdate_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigUpdate_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.ConfigUpdate.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdate_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigUpdate_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.ConfigUpdate.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.ConfigUpdate.Response)
  return target;
}

size_t ConfigUpdate_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.ConfigUpdate.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 err = 1;
  if (this->_internal_err() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigUpdate_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigUpdate_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigUpdate_Response::GetClassData() const { return &_class_data_; }

void ConfigUpdate_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigUpdate_Response *>(to)->MergeFrom(
      static_cast<const ConfigUpdate_Response &>(from));
}


void ConfigUpdate_Response::MergeFrom(const ConfigUpdate_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.ConfigUpdate.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_err() != 0) {
    _internal_set_err(from._internal_err());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdate_Response::CopyFrom(const ConfigUpdate_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.ConfigUpdate.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdate_Response::IsInitialized() const {
  return true;
}

void ConfigUpdate_Response::InternalSwap(ConfigUpdate_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdate_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_5fupdate_2eproto_getter, &descriptor_table_config_5fupdate_2eproto_once,
      file_level_metadata_config_5fupdate_2eproto[1]);
}

// ===================================================================

class ConfigUpdate::_Internal {
 public:
  static const ::cs::ConfigUpdate_Request& request(const ConfigUpdate* msg);
  static const ::cs::ConfigUpdate_Response& response(const ConfigUpdate* msg);
};

const ::cs::ConfigUpdate_Request&
ConfigUpdate::_Internal::request(const ConfigUpdate* msg) {
  return *msg->request_;
}
const ::cs::ConfigUpdate_Response&
ConfigUpdate::_Internal::response(const ConfigUpdate* msg) {
  return *msg->response_;
}
ConfigUpdate::ConfigUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cs.ConfigUpdate)
}
ConfigUpdate::ConfigUpdate(const ConfigUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::cs::ConfigUpdate_Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::cs::ConfigUpdate_Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cs.ConfigUpdate)
}

inline void ConfigUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&request_)) + sizeof(response_));
}

ConfigUpdate::~ConfigUpdate() {
  // @@protoc_insertion_point(destructor:cs.ConfigUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void ConfigUpdate::ArenaDtor(void* object) {
  ConfigUpdate* _this = reinterpret_cast< ConfigUpdate* >(object);
  (void)_this;
}
void ConfigUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cs.ConfigUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cs.ConfigUpdate.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cs.ConfigUpdate.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cs.ConfigUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cs.ConfigUpdate.Request request = 1;
  if (this->_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .cs.ConfigUpdate.Response response = 2;
  if (this->_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cs.ConfigUpdate)
  return target;
}

size_t ConfigUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cs.ConfigUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cs.ConfigUpdate.Request request = 1;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .cs.ConfigUpdate.Response response = 2;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigUpdate::GetClassData() const { return &_class_data_; }

void ConfigUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigUpdate *>(to)->MergeFrom(
      static_cast<const ConfigUpdate &>(from));
}


void ConfigUpdate::MergeFrom(const ConfigUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cs.ConfigUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_request()) {
    _internal_mutable_request()->::cs::ConfigUpdate_Request::MergeFrom(from._internal_request());
  }
  if (from._internal_has_response()) {
    _internal_mutable_response()->::cs::ConfigUpdate_Response::MergeFrom(from._internal_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigUpdate::CopyFrom(const ConfigUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cs.ConfigUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdate::IsInitialized() const {
  return true;
}

void ConfigUpdate::InternalSwap(ConfigUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigUpdate, response_)
      + sizeof(ConfigUpdate::response_)
      - PROTOBUF_FIELD_OFFSET(ConfigUpdate, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_config_5fupdate_2eproto_getter, &descriptor_table_config_5fupdate_2eproto_once,
      file_level_metadata_config_5fupdate_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cs::ConfigUpdate_Request* Arena::CreateMaybeMessage< ::cs::ConfigUpdate_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::ConfigUpdate_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::ConfigUpdate_Response* Arena::CreateMaybeMessage< ::cs::ConfigUpdate_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::ConfigUpdate_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::cs::ConfigUpdate* Arena::CreateMaybeMessage< ::cs::ConfigUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cs::ConfigUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
